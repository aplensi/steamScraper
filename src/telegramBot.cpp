#include "../include/telegramBot.h"

void telegramBot::cycleOfGetUpdates(){
    m_parser = new parser();
    m_reader = new itemReader();
    m_controll = new controller();
    setConnections();
}

void telegramBot::setConnections(){
    connect(this, &telegramBot::updateIsObtained, m_parser, &parser::parsBotUpdate);

    connect(m_parser, &parser::updateIdIsSet, this, &telegramBot::setUpdateIdToFile);
    connect(m_parser, &parser::emptyRequest, this, &telegramBot::getUpdates);

    connect(m_parser, &parser::commandStart, this, &telegramBot::answerStartCommand);
    connect(m_parser, &parser::commandCommand, this, &telegramBot::answerCommandCommand);

    connect(m_parser, &parser::commandSetId, [this](int chatId, QString steamId){
        connect(m_reader, &itemReader::sendResultOfSteamInventory, m_parser, &parser::parsAndCheckSteamId);
        connect(m_parser, &parser::sendIdAndSteamId, m_controll, &controller::pushUserToDB);
        connect(m_parser, &parser::nullCountOfItemsInventory, this, &telegramBot::answerNullCountOfItemInventory);
        connect(m_parser, &parser::brockenDataOfInventory, this, &telegramBot::answerBrockenId);
        connect(m_controll, &controller::userAdded, this, &telegramBot::answerSetIdCommand);
        m_reader->getSteamInventory(chatId, steamId);
    });

    connect(m_parser, &parser::commandGetPrice, [this](int tgId){
        connect(m_controll, &controller::setSteamIdOfUser, m_reader, &itemReader::getSteamInventory);
        connect(m_reader, &itemReader::sendResultOfSteamInventory, m_parser, &parser::parsInventory);
        connect(m_parser, &parser::brockenDataOfInventory, m_reader, &itemReader::getSteamInventory);
        connect(m_parser, &parser::dontHaveItems, this, &telegramBot::answerDontHaveItems);
        connect(m_parser, &parser::sendUserInventory, m_controll, &controller::fillUserInventory);
        connect(m_controll, &controller::invOfUserIsFilled, this, &telegramBot::answerGetInventoryCommad);
        m_controll->getSteamIdOfUser(tgId);
    });

    connect(m_parser, &parser::commandShowInvetory, [this](int tgId, QString steamId){
        connect(m_reader, &itemReader::sendResultOfSteamInventory, m_parser, &parser::parsInventory);
        connect(m_parser, &parser::nullCountOfItemsInventory, this, &telegramBot::answerNullCountOfItemInventory);
        connect(m_parser, &parser::brockenDataOfInventory, this, &telegramBot::answerBrockenId);
        connect(m_parser, &parser::dontHaveItems, this, &telegramBot::answerDontHaveItems);
        connect(m_parser, &parser::sendUserInventory, m_controll, &controller::fillUserInventory);
        connect(m_controll, &controller::invOfUserIsFilled, this, &telegramBot::answerGetInventoryCommad);
        m_reader->getSteamInventory(tgId, steamId);
    });

    connect(this, &telegramBot::idIsSet, this, &telegramBot::getUpdates);
}

void telegramBot::deleteConnections(){
    disconnect(this, nullptr, nullptr, nullptr);
    disconnect(m_parser, nullptr, nullptr, nullptr);
    disconnect(m_reader, nullptr, nullptr, nullptr);
    disconnect(m_controll, nullptr, nullptr, nullptr);
}

void telegramBot::connectToDb(QString userName, QString passWord, QString address, int port, QString nameDatabase){
    m_controll->connectToPgSQL(userName, passWord, address, port, nameDatabase);
}

void telegramBot::getUpdates(){
    QNetworkAccessManager *manager = new QNetworkAccessManager(this);
    QNetworkRequest request(QUrl("https://api.telegram.org/bot" + m_token + "/getUpdates?offset=" + m_updateId));
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");
    QTimer* timer = new QTimer(this);
    connect(timer, &QTimer::timeout, [this, manager, timer]() {
        disconnect(manager, &QNetworkAccessManager::finished, nullptr, nullptr);
        manager->deleteLater();
        timer->stop();
        timer->deleteLater();
        disconnect(manager, nullptr, nullptr, nullptr);
        getUpdates();
    });
    connect(manager, &QNetworkAccessManager::finished, [this, timer, manager](QNetworkReply *reply) {
        QByteArray responseData = reply->readAll();
        QJsonDocument jsonDoc = QJsonDocument::fromJson(responseData);
        disconnect(timer, nullptr, nullptr, nullptr);
        reply->deleteLater();
        manager->deleteLater();
        timer->deleteLater();
        emit updateIsObtained(jsonDoc);
    });
    manager->get(request);
    timer->start(4000);
}

void telegramBot::answerBrockenId(int tgId, QString steamId){
    if(m_countOfBrockenCheckOfInventory < 10){
        qDebug() << "count brocken tests: " << m_countOfBrockenCheckOfInventory;
        QTimer::singleShot(500, [this, tgId, steamId](){
            m_reader->getSteamInventory(tgId, steamId);
            m_countOfBrockenCheckOfInventory++;
        });
    }else{
        sendMessage(tgId, "ü§° –í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π id.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –ó–∞–∫—Ä—ã—Ç—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n- –ù–µ–≤–µ—Ä–Ω—ã–π id\n\n–í —Å–ª—É—á–∞–µ, "
                            "–µ—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ id, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n"
                            "(–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–ª–∏ id –∏ –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ - —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –∏ –ê—à–∏—Ä –∏–∑ –ù—å—é-–î–µ–ª–∏ –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω)");
        m_countOfBrockenCheckOfInventory = 0;                    
    }
    
}
void telegramBot::answerNullCountOfItemInventory(int tgId, QString steamId){
     sendMessage(tgId, "ü§° –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∫–∏–Ω–æ–≤.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∫–∏–Ω–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ\n- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–≥—Ä—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π id.");
}

void telegramBot::answerDontHaveItems(int chatId){
    sendMessage(chatId, "ü§° –ß—Ç–æ —Ç—ã —Ä–µ—à–∏–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å? \n–£ —Ç–µ–±—è –Ω–µ—Ç —Å–∫–∏–Ω–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!");
}

void telegramBot::answerGetInventoryCommad(int chatId, userInventory inventory){
    QString message = "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: \n\n";
    float commonPrice = 0;
    for(auto i : inventory.m_listOfItems){
        message += "üî• –ù–∞–∑–≤–∞–Ω–∏–µ: " + i.m_name + " | –¶–µ–Ω–∞: " + QString::number(i.m_price) +
        " | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + QString::number(i.m_count) + " | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –¢–ü: " + QString::number(i.m_countOfOffers) + "\n";
        commonPrice += i.m_price * i.m_count;
    }
    message += "\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: " + QString::number(commonPrice) + " –±–∞–∫—Å–æ–≤ –Ω–∞—Ö—É–π";
    sendMessage(chatId, message);
}

void telegramBot::answerStartCommand(int chatId){
    sendMessage(chatId, "–ë–æ—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ —Å–≤—è–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–≥ —Å–æ —Å—Ç–∏–º–æ–º, —á—Ç–æ–±—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–µ –≤–≤–æ–¥–∏—Ç—å id.\n"
                        "–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 1-3 –º–∏–Ω—É—Ç—ã "
                        "(–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –±—É–¥–µ—Ç —É —Ö–æ—Å—Ç–∏–Ω–≥–∞).\n –†–∞–±–æ—Ç–∞ –Ω–∞–¥ –±–æ—Ç–æ–º –≤—Å–µ –µ—â—ë –≤–µ–¥–µ—Ç—Å—è, –∫–æ–¥ –≥—Ä—è–∑–Ω—ã–π –∏ –≤ –∫–∞–∫–æ–π —Ç–æ —Å—Ç–µ–ø–µ–Ω–∏ –Ω–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π "
                        "—Ç–∞–∫ —á—Ç–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ –∫–æ–º–∞–Ω–¥–∞–º–∏, –∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.\n"
                        "–ü—Ä–æ–µ–∫—Ç opensource, –µ—Å–ª–∏ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ —Ç–æ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –±–æ—Ç–∞ –Ω–∞ —Å–≤–æ–µ–º, –±–æ–ª–µ–µ –º–æ—â–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏ —Å–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –±–∞–∑—É."
                        "\n\ngitHub –ø—Ä–æ–µ–∫—Ç–∞: \nhttps://github.com/aplensi/steamScraper");
}
void telegramBot::answerCommandCommand(int chatId){
    sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n\n"
                        "- /setid:id - —Å–≤—è–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å tg —Å –ø—Ä–æ—Ñ–∏–ª–µ–º steam.\n"
                        "- /getprice - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Ç–æ–ª—å–∫–æ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º steam)\n"
                        "- /showinventory:id - —Ü–µ–Ω–∞ –ª—é–±–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è\n\n"
                        "‚ÄºÔ∏è \"id\" –∑–∞–º–µ–Ω—è—Ç—å –Ω–∞ steamID64. –ü—Ä–∏–º–µ—Ä: /setid:123456789 \n(–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ç https://steamid.io )");
}

void telegramBot::sendMessage(int chatId, QString text){
    QNetworkAccessManager *manager = new QNetworkAccessManager(this);
    QNetworkRequest request(QUrl("https://api.telegram.org/bot" + m_token + "/sendMessage?chat_id=" + QString::number(chatId)+"&text=" + text));
    manager->get(request);
    deleteConnections();
    setConnections();
}

void telegramBot::setToken(QString token){
    m_token = token;
}

void telegramBot::answerSetIdCommand(int tgId, QString steamId){
    m_countOfBrockenCheckOfInventory = 0;
    sendMessage(tgId, "Id " + steamId + " —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º");
}

void telegramBot::setUpdateFile(QString fileName){
    QFile file(fileName);
    m_file = fileName;
    if(file.open(QIODevice::ReadOnly)){
        QTextStream in(&file);
        m_updateId = in.readLine();
        file.close();
    }
}

void telegramBot::setUpdateIdToFile(int id){
    QFile file(m_file);
    m_updateId = QString::number(id+1);
    if(file.open(QIODevice::WriteOnly)){
        QTextStream out(&file);
        out << m_updateId;
        file.close();
    }
    emit idIsSet();
}