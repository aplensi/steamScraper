#include "../include/telegramBot.h"

void telegramBot::cycleOfGetUpdates(){
    m_parser = new parser();
    m_reader = new itemReader();
    m_controll = new controller();
    connect(this, &telegramBot::updateIsObtained, m_parser, &parser::parsBotUpdate);

    connect(m_parser, &parser::updateIdIsSet, this, &telegramBot::setUpdateIdToFile);
    connect(m_parser, &parser::emptyRequest, this, &telegramBot::getUpdates);

    connect(m_parser, &parser::commandStart, this, &telegramBot::answerStartCommand);
    connect(m_parser, &parser::commandCommand, this, &telegramBot::answerCommandCommand);

    connect(m_parser, &parser::commandSetId, m_reader, &itemReader::getSteamInventory);
    connect(m_reader, &itemReader::sendResultOfSteamInventory, m_parser, &parser::parsAndCheckSteamId);
    connect(m_parser, &parser::sendIdAndSteamId, m_controll, &controller::pushUserToDB);
    connect(m_parser, &parser::nullCountOfItemsInventory, this, &telegramBot::answerNullCountOfItemInventory);
    connect(m_parser, &parser::brockenDataOfInventory, this, &telegramBot::answerBrockenId);
    connect(m_controll, &controller::userAdded, this, &telegramBot::answerSetIdCommand);

    connect(this, &telegramBot::idIsSet, this, &telegramBot::getUpdates);
}

void telegramBot::connectToDb(QString userName, QString passWord, QString address, int port, QString nameDatabase){
    m_controll->connectToPgSQL(userName, passWord, address, port, nameDatabase);
}

void telegramBot::getUpdates(){
    QNetworkAccessManager *manager = new QNetworkAccessManager(this);
    QNetworkRequest request(QUrl("https://api.telegram.org/bot" + m_token + "/getUpdates?offset=" + m_updateId));
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");
    connect(manager, &QNetworkAccessManager::finished, this, [=](QNetworkReply *reply) {
        QByteArray responseData = reply->readAll();
        QJsonDocument jsonDoc = QJsonDocument::fromJson(responseData);
        emit updateIsObtained(jsonDoc);
        reply->deleteLater();
        manager->deleteLater();
    });
    manager->get(request);
}

void telegramBot::answerBrockenId(int tgId, QString steamId){
    if(m_countOfBrockenCheckOfInventory < 10){
        qDebug() << "count brocken tests: " << m_countOfBrockenCheckOfInventory;
        QTimer::singleShot(500, [this, tgId, steamId](){
            m_reader->getSteamInventory(tgId, steamId);
            m_countOfBrockenCheckOfInventory++;
        });
    }else{
        sendMessage(tgId, "ü§° –í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π id.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –ó–∞–∫—Ä—ã—Ç—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å\n- –ù–µ–≤–µ—Ä–Ω—ã–π id\n\n–í —Å–ª—É—á–∞–µ, "
                            "–µ—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ id, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n"
                            "(–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–ª–∏ id –∏ –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ - —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º –∏ –ê—à–∏—Ä –∏–∑ –ù—å—é-–î–µ–ª–∏ –±—É–¥–µ—Ç –Ω–∞–∫–∞–∑–∞–Ω)");
        m_countOfBrockenCheckOfInventory = 0;                    
    }
    
}
void telegramBot::answerNullCountOfItemInventory(int tgId, QString steamId){
     sendMessage(tgId, "ü§° –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∫–∏–Ω–æ–≤.\n\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–∫–∏–Ω–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ\n- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–≥—Ä—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π id.");
}

void telegramBot::answerGetInventoryCommad(int chatId, userInventory inventory){
    QString message = "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: \n";
    for(auto i : inventory.m_listOfItems){
        message += "–ù–∞–∑–≤–∞–Ω–∏–µ: " + i.m_name + " | –¶–µ–Ω–∞: " + QString::number(i.m_price) +
        " | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + QString::number(i.m_count) + " | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –¢–ü: " + QString::number(i.m_countOfOffers) + "\n";
    }
    sendMessage(chatId, message);
}

void telegramBot::answerStartCommand(int chatId){
    sendMessage(chatId, "–ü–æ–∫–∞ –±–æ—Ç –Ω–∏—Ö—É—è –Ω–µ –º–æ–∂–µ—Ç, –Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è —Å–º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏ –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫ –∞–∫–∫–∞—É–Ω—Ç—É tg \n\ngitHub –ø—Ä–æ–µ–∫—Ç: \nhttps://github.com/aplensi/steamScraper");
}
void telegramBot::answerCommandCommand(int chatId){
    sendMessage(chatId, "–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: \n\n"
                        "- /setId:id - —Å–≤—è–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å tg —Å –ø—Ä–æ—Ñ–∏–ª–µ–º steam.\n"
                        "- /getPrice - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—Ç–æ–ª—å–∫–æ —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º steam)\n"
                        "- /showInventory:id - —Ü–µ–Ω–∞ –ª—é–±–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è\n\n"
                        "‚ÄºÔ∏è \"id\" –∑–∞–º–µ–Ω—è—Ç—å –Ω–∞ steamID64 (–µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç—É—Ç https://steamid.io )");
}

void telegramBot::sendMessage(int chatId, QString text){
    QNetworkAccessManager *manager = new QNetworkAccessManager(this);
    QNetworkRequest request(QUrl("https://api.telegram.org/bot" + m_token + "/sendMessage?chat_id=" + QString::number(chatId)+"&text=" + text));
    manager->get(request);
}

void telegramBot::setToken(QString token){
    m_token = token;
}

void telegramBot::answerSetIdCommand(int tgId, QString steamId){
    m_countOfBrockenCheckOfInventory = 0;
    sendMessage(tgId, "Id " + steamId + " —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º");
}

void telegramBot::setUpdateFile(QString fileName){
    QFile file(fileName);
    m_file = fileName;
    if(file.open(QIODevice::ReadOnly)){
        QTextStream in(&file);
        m_updateId = in.readLine();
        file.close();
    }
}

void telegramBot::setUpdateIdToFile(int id){
    QFile file(m_file);
    m_updateId = QString::number(id+1);
    if(file.open(QIODevice::WriteOnly)){
        QTextStream out(&file);
        out << m_updateId;
        file.close();
    }
    emit idIsSet();
}